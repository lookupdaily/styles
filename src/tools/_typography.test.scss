@use "true" as *;
@use "typography";
@use "sass:string";

$fonts: (
  body: (
    family: (
      "Alice",
      serif,
    ),
    weight: 500,
    size: "regular",
  ),
  heading: (
    family: (
      "Comic sans",
      sans-serif,
    ),
    weight: 400,
  ),
  sub-heading: (
    family: (
      "Alice",
      sans-serif,
    ),
  ),
);
$font-sizes: (
  regular: 1rem,
  large: 1.75rem,
);

@include describe("font-family mixin") {
  @include it("includes font family property with matching variable") {
    @include assert {
      @include output {
        .text {
          @include typography.font-family("body");
        }
      }

      @include expect {
        .text {
          font-family: var(--ld-font-body);
        }
      }
    }
  }
}

@include describe("font-size mixin") {
  @include it("includes font size property with matching variable") {
    @include assert {
      @include output {
        .text {
          @include typography.font-size("regular");
        }
      }

      @include expect {
        .text {
          font-size: var(--ld-font-size-regular);
        }
      }
    }
  }
}

@include describe("test mixin") {
  @include it(
    "includes font-family and font-size variable, plus weight value"
  ) {
    @include assert {
      @include output {
        .text {
          @include typography.text("body", $fonts);
        }
      }

      @include expect {
        .text {
          font-family: var(--ld-font-body);
          font-size: var(--ld-font-size-regular);
          font-weight: 500;
        }
      }
    }
  }

  @include it(
    "does note include font-size or weight if values aren't in the map"
  ) {
    @include assert {
      @include output {
        .text {
          @include typography.text("sub-heading", $fonts);
        }
      }

      @include expect {
        .text {
          font-family: var(--ld-font-sub-heading);
        }
      }
    }
  }

  @include it(
    "does note include font-size or weight if map isn't found for name"
  ) {
    @include assert {
      @include output {
        .text {
          @include typography.text("test", $fonts);
        }
      }

      @include expect {
        .text {
          font-family: var(--ld-font-test);
        }
      }
    }
  }
}

@include describe("Typography utilities") {
  @include it("Creates utility classes for typography") {
    @include assert {
      @include output {
        @include typography.create-classes($fonts, $font-sizes);
      }

      @include expect {
        .ld-text-body {
          font-family: var(--ld-font-body);
          font-size: var(--ld-font-size-regular);
          font-weight: 500;
        }

        .ld-text-heading {
          font-family: var(--ld-font-heading);
          font-weight: 400;
        }

        .ld-text-sub-heading {
          font-family: var(--ld-font-sub-heading);
        }

        .ld-text-regular {
          font-size: var(--ld-font-size-regular);
        }

        .ld-text-large {
          font-size: var(--ld-font-size-large);
        }
      }
    }
  }

  @include it("Creates list of variables to be included in a selector") {
    @include assert {
      @include output {
        .section {
          @include typography.get-variables($fonts, $font-sizes);
        }
      }

      @include expect {
        .section {
          --ld-font-body: #{string.unquote("Alice")}, serif;
          --ld-font-heading: #{string.unquote("Comic sans")}, sans-serif;
          --ld-font-sub-heading: #{string.unquote("Alice")}, sans-serif;
          --ld-font-size-regular: 1rem;
          --ld-font-size-large: 1.75rem;
        }
      }
    }
  }
}
